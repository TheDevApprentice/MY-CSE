# Makefile pour l'API Mon CSE avec Docker
.PHONY: help setup build up down restart logs status clean redis-cli shell tools

# Couleurs pour l'affichage
BLUE=\033[0;34m
GREEN=\033[0;32m
YELLOW=\033[1;33m
NC=\033[0m

# Variables
COMPOSE_FILE=docker-compose.yml
PROJECT_NAME=cse-api

help: ## Affiche cette aide
	@echo "$(BLUE)üê≥ Commandes Docker disponibles pour l'API Mon CSE$(NC)"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(YELLOW)%-15s$(NC) %s\n", $$1, $$2}'
	@echo ""

setup: ## Configuration initiale du projet Docker
	@echo "$(BLUE)üöÄ Configuration initiale...$(NC)"
	@mkdir -p docker/redis logs
	@if [ ! -f .env ]; then cp .env.docker .env && echo "$(GREEN)‚úÖ Fichier .env cr√©√©$(NC)"; else echo "$(YELLOW)‚ö†Ô∏è  .env existe d√©j√†$(NC)"; fi
	@chmod +x docker/scripts/docker-dev.sh
	@echo "$(GREEN)‚úÖ Configuration termin√©e$(NC)"

build: ## Construit les images Docker
	@echo "$(BLUE)üî® Construction des images...$(NC)"
	@docker-compose build --no-cache
	@echo "$(GREEN)‚úÖ Images construites$(NC)"

up: ## D√©marre tous les services
	@echo "$(BLUE)üöÄ D√©marrage des services...$(NC)"
	@docker-compose up -d
	@echo "$(GREEN)‚úÖ Services d√©marr√©s$(NC)"
	@echo "$(YELLOW)üì± API: http://localhost:3333$(NC)"
	@echo "$(YELLOW)üî¥ Redis: localhost:6379$(NC)"

down: ## Arr√™te tous les services
	@echo "$(BLUE)üõë Arr√™t des services...$(NC)"
	@docker-compose down
	@echo "$(GREEN)‚úÖ Services arr√™t√©s$(NC)"

restart: ## Red√©marre tous les services
	@echo "$(BLUE)üîÑ Red√©marrage...$(NC)"
	@docker-compose restart
	@echo "$(GREEN)‚úÖ Services red√©marr√©s$(NC)"

logs: ## Affiche les logs en temps r√©el
	@echo "$(BLUE)üìã Logs en temps r√©el (Ctrl+C pour quitter)$(NC)"
	@docker-compose logs -f

status: ## Affiche le statut des conteneurs
	@echo "$(BLUE)üìä Statut des conteneurs$(NC)"
	@docker-compose ps
	@echo ""
	@echo "$(BLUE)üìä Utilisation des ressources$(NC)"
	@docker stats --no-stream

clean: ## Nettoie les ressources Docker inutilis√©es
	@echo "$(BLUE)üßπ Nettoyage Docker...$(NC)"
	@docker-compose down
	@docker system prune -f
	@echo "$(GREEN)‚úÖ Nettoyage termin√©$(NC)"

clean-all: ## Nettoie tout y compris les volumes
	@echo "$(BLUE)üßπ Nettoyage complet...$(NC)"
	@docker-compose down -v
	@docker system prune -af
	@docker volume prune -f
	@echo "$(GREEN)‚úÖ Nettoyage complet termin√©$(NC)"

redis-cli: ## Se connecte √† Redis CLI
	@echo "$(BLUE)üî¥ Connexion √† Redis CLI$(NC)"
	@docker-compose exec redis redis-cli

shell: ## Se connecte au shell de l'API
	@echo "$(BLUE)üíª Shell de l'API$(NC)"
	@docker-compose exec api sh

tools: ## D√©marre avec Redis Commander
	@echo "$(BLUE)üõ†Ô∏è  D√©marrage avec outils...$(NC)"
	@docker-compose --profile tools up -d
	@echo "$(GREEN)‚úÖ Services + outils d√©marr√©s$(NC)"
	@echo "$(YELLOW)üì± API: http://localhost:3333$(NC)"
	@echo "$(YELLOW)üî¥ Redis: localhost:6379$(NC)"
	@echo "$(YELLOW)üñ•Ô∏è  Redis Commander: http://localhost:8081 (admin/secret)$(NC)"

dev: ## D√©marre en mode d√©veloppement avec rebuild
	@echo "$(BLUE)üîÑ Mode d√©veloppement...$(NC)"
	@docker-compose up --build

test: ## Teste la connexion aux services
	@echo "$(BLUE)üß™ Test des services...$(NC)"
	@echo "Test de l'API..."
	@curl -s http://localhost:3333 > /dev/null && echo "$(GREEN)‚úÖ API OK$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  API non disponible$(NC)"
	@echo "Test de Redis..."
	@docker-compose exec redis redis-cli ping > /dev/null && echo "$(GREEN)‚úÖ Redis OK$(NC)" || echo "$(YELLOW)‚ö†Ô∏è  Redis non disponible$(NC)"

# Installation des d√©pendances locales
install: ## Installe les d√©pendances locales
	@echo "$(BLUE)üì¶ Installation des d√©pendances...$(NC)"
	@pnpm install
	@echo "$(GREEN)‚úÖ D√©pendances install√©es$(NC)"

# Commande par d√©faut
.DEFAULT_GOAL := help